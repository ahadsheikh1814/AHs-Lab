{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TypeWriterEffect",
  "type": "registry:component",
  "title": "Type Writer Effect",
  "description": "A typewriter effect component for displaying animated text.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "resistry/TypeWriterEffect.tsx",
      "content": "\"use client\";\r\nimport { motion } from \"motion/react\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\ninterface TextProps {\r\n  texts?: string[];\r\n}\r\n\r\ninterface TypewriterProps {\r\n  texts: string[];\r\n}\r\n\r\nconst TypewriterEffect = ({ texts = [\"beautiful.\", \"modern.\", \"elegant.\", \"minimal.\"] }: TextProps) => {\r\n  return (\r\n    <h1 className=\"inline-block relative w-[320px] overflow-hidden text-7xl font-bold tracking-tighter text-left md:text-center mt-10\">\r\n      <motion.span\r\n        initial={{ width: \"0%\" }}\r\n        animate={{ width: \"100%\" }}\r\n        transition={{ duration: 0.3, ease: \"easeInOut\", delay: 0.5 }}\r\n        className=\"w-full absolute bottom-0 left-0 h-[70px] bg-lime-500/10 block\"\r\n      />\r\n      <motion.span\r\n        initial={{ width: \"0%\" }}\r\n        animate={{ width: \"100%\" }}\r\n        transition={{ duration: 0.3, ease: \"easeInOut\", delay: 0.5 }}\r\n        className=\"w-full absolute bottom-0 left-0 h-1 bg-lime-500 block\"\r\n      />\r\n      <Typewriter texts={texts} />\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default TypewriterEffect;\r\n\r\nconst Typewriter = ({ texts }: TypewriterProps) => {\r\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\r\n  const [currentText, setCurrentText] = useState(\"\");\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [showCursor, setShowCursor] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const typeSpeed = isDeleting ? 100 : 150;\r\n    const fullText = texts[currentTextIndex];\r\n\r\n    const timeout = setTimeout(() => {\r\n      if (!isDeleting && currentText === fullText) {\r\n        // Finished typing current word, wait then start deleting\r\n        setTimeout(() => setIsDeleting(true), 2000);\r\n      } else if (isDeleting && currentText === \"\") {\r\n        // Finished deleting, move to next word\r\n        setIsDeleting(false);\r\n        setCurrentTextIndex((prev) => (prev + 1) % texts.length);\r\n      } else {\r\n        // Continue typing or deleting\r\n        setCurrentText(\r\n          isDeleting\r\n            ? fullText.substring(0, currentText.length - 1)\r\n            : fullText.substring(0, currentText.length + 1)\r\n        );\r\n      }\r\n    }, typeSpeed);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [currentText, currentTextIndex, isDeleting, texts]);\r\n\r\n  // Cursor blinking effect\r\n  useEffect(() => {\r\n    const cursorInterval = setInterval(() => {\r\n      setShowCursor((prev) => !prev);\r\n    }, 500);\r\n\r\n    return () => clearInterval(cursorInterval);\r\n  }, []);\r\n\r\n  return (\r\n    <span className=\"inline-block\">\r\n      <span className=\"text-primary\">{currentText}</span>\r\n      <span\r\n        className={`inline-block w-0.5 h-16 bg-lime-500 ml-1 ${\r\n          showCursor ? \"opacity-100\" : \"opacity-0\"\r\n        } transition-opacity duration-100`}\r\n      />\r\n    </span>\r\n  );\r\n};",
      "type": "registry:component",
      "target": "components/AHs/TypeWriterEffect.tsx"
    }
  ]
}